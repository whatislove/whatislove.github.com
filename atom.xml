<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[悠游的叶的Blog]]></title>
  <link href="http://whatislove.github.com/atom.xml" rel="self"/>
  <link href="http://whatislove.github.com/"/>
  <updated>2013-04-16T17:12:50+08:00</updated>
  <id>http://whatislove.github.com/</id>
  <author>
    <name><![CDATA[悠游的叶]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[番茄工作法介绍]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/16/fan-qie-gong-zuo-fa-jie-shao/"/>
    <updated>2013-04-16T17:08:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/16/fan-qie-gong-zuo-fa-jie-shao</id>
    <content type="html"><![CDATA[<p>番茄工作法的简单的介绍，详细看番茄工作法这本书</p>

<!-- more -->


<p><img src="http://whatislove.github.com/images/own/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95.jpg" title="番茄工作法" alt="番茄工作法" /></p>

<p>也可以下载这个文档</p>

<pre><code>http://ishare.iask.sina.com.cn/f/20702660.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox 设置虚拟机连接操作系统]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/16/virtualbox-she-zhi-xu-ni-ji-lian-jie-cao-zuo-xi-tong/"/>
    <updated>2013-04-16T16:47:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/16/virtualbox-she-zhi-xu-ni-ji-lian-jie-cao-zuo-xi-tong</id>
    <content type="html"><![CDATA[<p>VirtualBox简易设置文档</p>

<p>一、安装虚拟机</p>

<p>本人创建的虚拟机名称为“winxp”，以下均以此为描述。</p>

<p>二、后台运行虚拟机并通过远程桌面连接</p>

<p>（一）、远程桌面的功能开启</p>

<p>1、首先需要安装虚拟机扩展包“VM VirtualBox Extension Pack”，否则无法链接(从 VirtualBox 4.0 开始，VirtualBox 添加了一些像远程桌面连接
的功能的扩展包。现在因为我们需要远程桌面连接来控制虚拟机，所以还需要安装这个扩展包)，可至官方网站下载各版本对应的扩展包。执行如
下语句安装（注意把包的名称改成实际下载的包名称）：</p>

<pre><code>sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-4.1.18-78361.vbox-extpack
</code></pre>

<p>如果是低版本升级为高版本，则加上replace参数：</p>

<!-- more -->


<pre><code>sudo VBoxManage extpack install --replace Oracle_VM_VirtualBox_Extension_Pack-4.1.9-75467.vbox-extpack
</code></pre>

<p>链接：</p>

<pre><code>http://dlc.sun.com.edgesuite.net/virtualbox/4.1.8/
</code></pre>

<p>2、开启远程桌面(启动不来再执行一遍)</p>

<pre><code>VBoxManage modifyvm winxp --vrde on
</code></pre>

<p>3、设置远程桌面端口，此处设置为10086(启动不来再执行一遍)：</p>

<pre><code>VBoxManage modifyvm winxp --vrdeport 10086
</code></pre>

<p>（二）、rdp协议中设置远程桌面的用户名和密码
1、首先设置校验库为：VBoxAuthSimple（官方网站这样写的，不知道为什么要这样设置？）：</p>

<pre><code>VBoxManage setproperty vrdeauthlibrary "VBoxAuthSimple"
</code></pre>

<p>2、生成加密后的hash密码：</p>

<pre><code>VBoxManage internalcommands passwordhash "123456"
#此处生成的hash码为：8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
</code></pre>

<p>3、设置虚拟机为外部校验（虚拟机关闭时执行否则报错）：</p>

<pre><code>VBoxManage modifyvm winxp --vrdeauthtype external
</code></pre>

<p>4、设置用户名和密码，winxp为虚拟机名称，VBoxAuthSimple/users/admin中的admin为用户名（用户名可以自己设置）：</p>

<pre><code>VBoxManage setextradata winxp "VBoxAuthSimple/users/admin" 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
</code></pre>

<p>（三）、命令行管理虚拟机</p>

<p>1、通过如下命令行启动虚拟机，使虚拟机在后台运行</p>

<pre><code>VBoxManage startvm winxp --type headless
</code></pre>

<p>2、关闭虚拟机</p>

<pre><code>VBoxManage controlvm winxp acpipowerbutton
</code></pre>

<p>3、查看虚拟机正在运行的虚拟机</p>

<pre><code>VBoxManage list runningvms
</code></pre>

<p>（四）、通过rdesktop程序连接本机的后台虚拟机，运行前确认安装了rdesktop程序，如果没有安装，首先安装。</p>

<pre><code>rdesktop -u admin -p 123456 10.19.14.56:10086
</code></pre>

<p>特别注意：VBoxManage命令可以实现很多界面里无法实现的操作，如果需要深入挖掘相关功能，还需要命令行的操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[samba配置]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/11/sambapei-zhi/"/>
    <updated>2013-04-11T10:39:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/11/sambapei-zhi</id>
    <content type="html"><![CDATA[<p>1)  添加用户：可以省去此步</p>

<p>Samba 访问可以不需要用户，但为了系统安全，建议为每个用户建立独立的samba 访问目录。</p>

<p>这里，我们建立的是普通的Linux用户</p>

<pre><code>#useradd wybsmb
#passwd  wybsmb
</code></pre>

<p>2) 修改samba 配置文件</p>

<pre><code>vi /etc/samba/smb.conf 
</code></pre>

<p>到该文件的末尾，增加如下代码：</p>

<pre><code>[wybsmb] 
    path = /home/wangyibo/wybtmp
    valid users = wybsmb
    writable = yes 
</code></pre>

<!-- more -->


<p>其中，</p>

<p>[wybsmb] 表示samba显示的目录名</p>

<p>Path是Samba 目录的绝对路径，在建立Linux 用户后，该目录是自动生成的。</p>

<p>valid users 是合法用户</p>

<p>writable表示是否可写</p>

<p>如果有多用户需要访问该目录，则validusers配置如下:</p>

<pre><code>valid users=wangyibo,yydy 
</code></pre>

<p>这里需要注意的是，其他用户可能没有访问该目录的权限，这就需要改变该目录权限，比如</p>

<p>采用</p>

<pre><code>sudo chmod –R 777 /home/wangyibo/wybtmp
</code></pre>

<p>如果需要所有用户都能访问，则删除valid users = wybsmb的同时，增加:</p>

<pre><code>guest ok = yes 
</code></pre>

<p>3) 生成smb 密码：可以省去此步</p>

<pre><code>smbpasswd wybsmb
</code></pre>

<p>注意，如果出现如下问题，说明是没有该用户，请使用 -a 参数，表示增加一个新的samba<br/>
用户，该用户需要是Linux的用户。</p>

<pre><code>#sudo smbpasswd -a wybsmb
NewSMBpassword: 
Retype newSMBpassword: 
</code></pre>

<p>至此，samba 配置已经完成，可以在window下通过\ip 这种方法来访问Linux</p>

<p>查看Samba服务运行状态：</p>

<pre><code>sudo service smbd status
</code></pre>

<p>查看samba是否配置成功：</p>

<pre><code>smbclient -L //10.18.216.101 -U wybsmb
smbclient -L{//服务器地址} -U{用户名}
</code></pre>

<p>4)samba 维护</p>

<p>重启虚拟机 ：</p>

<pre><code>sudo service smbd restart
</code></pre>

<p>停止Samba服务：</p>

<pre><code>sudo service smbd stop
</code></pre>

<p>启动Samba服务：</p>

<pre><code>sudo service smbd start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转-Octopress 增加Navibar]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/08/zhuan-octopress-zeng-jia-navibar/"/>
    <updated>2013-04-08T20:06:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/08/zhuan-octopress-zeng-jia-navibar</id>
    <content type="html"><![CDATA[<p>首先用rake来增加一个需要增加的页面，例如:</p>

<pre><code>rake new_page[About]
</code></pre>

<p>这是会在source/目录先生产about目录以及index.markdown，如果这样直接generate，是不会把about页面增加到navibar中的，需要在navigation.html中进行设置，如果直接在/source/_includes/custom/navigation.html中修改，那么在切换主题时，改修改是不会保存的，需要再次修改，所以最好的方法是在主题文件中修改</p>

<pre><code>.theme/classic/source/_includes/custom/navigation.html
</code></pre>

<p>修改成</p>

<pre><code>navigation.html

&lt;ul class="main-navigation"&gt;
  &lt;li&gt;&lt;a href="http://whatislove.github.com/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://whatislove.github.com/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://whatislove.github.com/about"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<!-- more -->


<p>然后重新安装主题，</p>

<pre><code>rake install['theme name']
rake generate
rake deploy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svn服务器在ubuntu下配置]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/svnfu-wu-qi-zai-ubuntuxia-pei-zhi/"/>
    <updated>2013-04-07T13:56:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/svnfu-wu-qi-zai-ubuntuxia-pei-zhi</id>
    <content type="html"><![CDATA[<p>1.安装sudo apt-get install subversion</p>

<p>2.创建项目目录（svn版本库）</p>

<pre><code>mkdir -p /data/svndata
svnadmin create /data/svndata/wybsvn  wybsvn为项目名称
svnadmin create XXX(XXX为带路径的项目名称，如/home/abc/XXX）
</code></pre>

<p>3.配置svn</p>

<p>在svn 安装目录下(/data/svndata/wybsvn)</p>

<p>可以看到conf文件夹，可针对conf文件夹中的authz、passwd、svnserve.conf进行设 置.</p>

<p>svnserve.conf –  svn服务配置文件，该文件版本库目录的conf目录下。</p>

<p>passwd – 用户名口令文件，该文件名在文件svnserve.conf中指定，缺省为同目录下的。</p>

<p>authz  – 权限配置文件，该文件名也在文件svnserve.conf中指定，缺省为同目录下的。</p>

<!-- more -->


<p>开始设置:</p>

<p>conf/svnserve.conf 文件</p>

<p>配置项分为以下5项：</p>

<p>anon-access  控制非鉴权用户访问版本库的权限。</p>

<p>auth-access   控制鉴权用户访问版本库的权限。</p>

<p>password-db 指定用户名口令文件名。</p>

<p>authz-db       指定权限配置文件名，通过该文件可以实现以路径为基础的访问控制。</p>

<p>realm             指定版本库的认证域，即在登录时提示的认证域名称。若两个版本库的</p>

<p>认证域相同，建议使用相同的用户名口令数据文件</p>

<p>最后展示一下我设置的版本</p>

<pre><code>anon-access = read
auth-access = write
password-db = passwd
authz-db = authz
</code></pre>

<p>conf /Passwd 文件</p>

<pre><code>username = passwd
</code></pre>

<p>最后展示一下我设置的版本</p>

<pre><code>[users]
wangyibo=123456
</code></pre>

<p>conf /authz  文件</p>

<p>[groups]       设置组
admin = user1
[/]              根目录权限设置（就是“svndata”这个文件夹）
user1 = rw      用户1权限是：可读写
user2 = r        用户2权限是：可读，不可写
@admin = rw    设置组权限
[svndata:/wybsvn]     设置根目录下“wybsvn”文件夹的权限
user1 = rw
user2 = r</p>

<p>…以此类推</p>

<p>最后展示一下我设置的版本</p>

<pre><code>[groups]
admin = wangyibo
[/]
@admin = rw
</code></pre>

<p>4.启动和停止SVN服务</p>

<p>启动SVN服务:</p>

<pre><code>svnserve -d -r 项目目录
svnserve -d -r usr/alibaba/data/svndata/
</code></pre>

<p>-d表示后台运行
-r 指定根目录是 /data/svndata/</p>

<p>停止SVN服务:</p>

<pre><code>ps -aux |grep svn
</code></pre>

<p>kill -9 进程杀掉</p>

<p>访问链接</p>

<p>svn://10.18.216.101/wybsvn</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache 与Jboss 的环境搭建]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/apache-yu-jboss-de-huan-jing-da-jian/"/>
    <updated>2013-04-07T13:51:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/apache-yu-jboss-de-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p>1.首先是环境的安装，需要安装</p>

<p>httpd(也就是apache http server http服务器 罗嗦下：Tomcat应用也算非常广泛的web服务器，支持部分j2ee， 只能做jsp和servlet的container)</p>

<p>jboss (应用服务器)</p>

<p>mod_jk(mod_jk 也叫 JK，这是一款 Apache/IIS 用来连接后台Tomcat的模块，支持集群和负载均衡)</p>

<p>安装 httpd:</p>

<pre><code>wget http://archive.apache.org/dist/httpd/httpd-2.0.61.tar.gz
tar -zxvf httpd-2.0.61.tar.gz
</code></pre>

<p>进入httpd-2.0.61,执行安装</p>

<pre><code>$ ./configure –prefix=/usr/alibaba/install/httpd-2.0.61 –enable-rewrite=static –with-mpm=worker –enable-so –enable-proxy –enable-proxy-http –enable-deflate
$ make
$ make install
</code></pre>

<!-- more -->


<p>安装 jboss:</p>

<pre><code>wget http://nchc.dl.sourceforge.net/sourceforge/jboss/jboss-4.0.5.GA.zip
cd /usr/alibaba/install
unzip ../jboss-4.0.5.GA.zip
</code></pre>

<p>安装 mod_jk</p>

<pre><code>wget http://archive.apache.org/dist/tomcat/tomcat-connectors/jk/source/jk-1.2.26/tomcat-connectors-1.2.26-src.tar.gz
tar -zxvf tomcat-connectors-1.2.26-src.tar.gz
</code></pre>

<p>进入目录,native执行编译</p>

<pre><code>./configure –with-apxs=/usr/alibaba/install/httpd-2.0.61/bin/apxs
make
cp apache-2.0/mod_jk.so ../../../install/httpd-2.0.61/modules/
</code></pre>

<p>2.开始配置httpd,jboss,mod_jk</p>

<p>配置mod_jk:</p>

<p>mod_jk.conf：</p>

<p>主要定义mod_jk模块的位置以及mod_jk模块的连接日志设置，还有定义worker.properties文件的位置。</p>

<p>worker.properties：</p>

<p>定义worker的参数，主要是连接tomcat主机的地址和端口信息。</p>

<p>如果Tomcat与apache不在同一台机器上，或者需要做多台机器上tomcat的负载均衡只需要更改workers.properties文件中的相应定义即可。</p>

<p>建立mod_jk.conf，可以存放在你想存放的目录，通常放置在 apche/conf下</p>

<p>展示下我的配置文件:</p>

<pre><code>JkWorkersFile /usr/env/wwwConf/workers.properties
JkLogFile /usr/env/logs/mod_jk.log
# Set the jk log level [debug/error/info]
JkLogLevel info
# Select the log format
JkLogStampFormat ”[%a %b %d %H:%M:%S %Y] ”
# JkOptions indicate to send SSL KEY SIZE,
JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories
# JkRequestLogFormat set the request format
JkRequestLogFormat ”%w %V %T”
JkMount /*.jsp jspWorker
</code></pre>

<p>配置workers.properties（存放我要转发的jboss的配置）</p>

<pre><code>worker.list=jspWorker   
# Set properties for jspWorker   

worker.jspWorker.type=ajp13  
worker.jspWorker.host=localhost    
worker.jspWorker.port=8009   
worker.jspWorker.lbfactor=50    
worker.jspWorker.cachesize=10   
worker.jspWorker.cache_timeout=600    
worker.jspWorker.socket_keepalive=1   
worker.jspWorker.socket_timeout=300 
</code></pre>

<p>然后把mod_jk.conf这个配置项配置到apahce/conf/httpd.conf</p>

<pre><code>Include /usr/env/wwwConf/mod_jk.conf
LoadModule jk_module modules/mod_jk.so
</code></pre>

<p>这个时候你可以修改端口，默认是80，但是1024之前的端口只有root才可以启动，你可以把它修改为1024之后的
Listen 8888</p>

<p>配置jboss，你可以修改jboss的ajp13端口</p>

<p>我这就用默认的了，修改的目录在：</p>

<pre><code>jboss-4.2.3.GA/server/default/deploy/jboss-web.deployer/server.xml
</code></pre>

<p>这个时候你把war包拷贝到jboss-4.2.3.GA/server/default/deploy下你就可以通过apache访问jboss的资源</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven创建多模块项目]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/mavenchuang-jian-duo-mo-kuai-xiang-mu/"/>
    <updated>2013-04-07T13:48:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/mavenchuang-jian-duo-mo-kuai-xiang-mu</id>
    <content type="html"><![CDATA[<p>1.生成父级工程</p>

<pre><code>mvn archetype:create -DgroupId=com.wyb -DartifactId=union -Dversion=1.0
</code></pre>

<p>备注：</p>

<p><groupId>:一个项目群的ID,一个项目群可以包含多个项目</p>

<p><artifactId>:一个项目的ID,是每个项目的唯一ID.</p>

<p><version>:描述了项目当前的版本.</p>

<p>打开union目录删除src文件夹，打开pom.xml，将packaging属性修改为pom（表示为父工程）</p>

<!-- more -->


<p>不然会在建立子工程的时候报：</p>

<pre><code>Embedded error: Unable to add module to the current project as it is not of packaging type ’pom’
</code></pre>

<p>2.生成子工程：</p>

<pre><code>mvn archetype:create -DgroupId=com.wyb.biz.common -DartifactId=union-biz-common -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.biz.srv -DartifactId=union-biz-srv -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.biz.sys -DartifactId=union-biz-sys -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.bundle.war -DartifactId=union-bundle-war -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.common -DartifactId=union-common -Dversion=1.0  mvn archetype:create -DgroupId=com.wyb.commontest -DartifactId=union-commontest -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.dal -DartifactId=union-dal -Dversion=1.0
mvn archetype:create -DgroupId=com.wyb.deploy -DartifactId=union-deploy -Dversion=1.0 -DarchetypeArtifactId=maven-archetype-webapp
mvn archetype:create -DgroupId=com.wyb.web -DartifactId=union-web -Dversion=1.0
</code></pre>

<p>备注：</p>

<p>union-biz-common 业务层，存放常用组件</p>

<p>union-biz-srv     业务层，自己的业务</p>

<p>union-biz-sys    业务层，系统的业务</p>

<p>union-bundle-war 配置文件通常放这里</p>

<p>union-common     存放union常用的工具</p>

<p>union-commontest 测试的基础，所有测试都要依赖这个</p>

<p>union-dal        存放dao</p>

<p>union-deploy     页面和静态文件通常写在这里</p>

<p>union-web        web层，action通常写在这里</p>

<p>其中修改的重点为打包 方式(war/jar)</p>

<p>改为pom形式，这也就意味这这是一个父工程，另外版本号默认是SNAPSHOT意思是快照的意思，就是项目开发中的意思，你要是</p>

<p>看着不爽可以把它删掉，另外需要说明一下dependencyManagement标签，这个标签表示子类可以隐式的继承父pom文件的依赖库，在子</p>

<p>pom中不需要指定版本号，推荐这样，这样可以方便开发，你要修改什么依赖的版本只需要更改父pom就可以了，dependencies是显示继承，你要</p>

<p>是在子pom中声明，就必须写明版本号，不写默认就继承了</p>

<p>3.修改各个pom,添加相关依赖</p>

<p>Java代码</p>

<pre><code>&lt;dependency&gt;
&lt;groupId&gt;com.wyb.biz.common&lt;/groupId&gt;
&lt;artifactId&gt;union-biz-common&lt;/artifactId&gt;
&lt;version&gt;${project.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>4.转换成eclipse项目：</p>

<pre><code>mvn eclipse:clean eclipse:eclipse
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse 报错java.lang.UnsatisfiedLinkError: Could not load SWT library. Reasons:]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/eclipse-bao-cuo-java-dot-lang-dot-unsatisfiedlinkerror-could-not-load-swt-library-reasons/"/>
    <updated>2013-04-07T13:44:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/eclipse-bao-cuo-java-dot-lang-dot-unsatisfiedlinkerror-could-not-load-swt-library-reasons</id>
    <content type="html"><![CDATA[<p>引起原因：把jdk目录指定了自己下载的jdk目录。</p>

<p>网上搜索了半天，找到解决方法</p>

<!-- more -->


<pre><code>!SESSION 2012-04-27 13:36:40.632 ———————————————–
eclipse.buildId=I20110613-1736
java.version=1.6.0_18
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=zh_CN
Command-line arguments: -os linux -ws gtk -arch x86_64

!ENTRY org.eclipse.osgi 4 0 2012-04-27 13:36:42.720
!MESSAGE Application error
!STACK 1
java.lang.UnsatisfiedLinkError: Could not load SWT library. Reasons:
no swt-gtk-3740 in java.library.path
no swt-gtk in java.library.path
Can’t load library: /home/wangyibo/.swt/lib/linux/x86_64/libswt-gtk-3740.so
Can’t load library: /home/wangyibo/.swt/lib/linux/x86_64/libswt-gtk.so

at org.eclipse.swt.internal.Library.loadLibrary(Library.java:285)
at org.eclipse.swt.internal.Library.loadLibrary(Library.java:194)
at org.eclipse.swt.internal.C.&lt;clinit&gt;(C.java:21)
at org.eclipse.swt.internal.Converter.wcsToMbcs(Converter.java:63)
at org.eclipse.swt.internal.Converter.wcsToMbcs(Converter.java:54)
at org.eclipse.swt.widgets.Display.&lt;clinit&gt;(Display.java:132)
at org.eclipse.ui.internal.Workbench.createDisplay(Workbench.java:695)
at org.eclipse.ui.PlatformUI.createDisplay(PlatformUI.java:161)
at org.eclipse.ui.internal.ide.application.IDEApplication.createDisplay(IDEApplication.java:153)
at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:95)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
</code></pre>

<p>解决办法：</p>

<pre><code>On mine it had an older version copied into the home directory under .swt After checking around the system, I found teh 3740 under /usr/lib/jni I just symlinked them in and it worked

ln -s /usr/lib/jni/libswt-* ~/.swt/lib/linux/x86_64/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转-搞懂 linux启动过程]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/zhuan-gao-dong-linuxqi-dong-guo-cheng/"/>
    <updated>2013-04-07T13:35:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/zhuan-gao-dong-linuxqi-dong-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="http://whatislove.github.com/images/own/boot.png" title="boot" alt="boot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下解决sublime-text 2中文乱码和中文输入法的问题]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/ubuntuxia-jie-jue-sublime-text-2zhong-wen-luan-ma-he-zhong-wen-shu-ru-fa-de-wen-ti/"/>
    <updated>2013-04-07T13:26:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/ubuntuxia-jie-jue-sublime-text-2zhong-wen-luan-ma-he-zhong-wen-shu-ru-fa-de-wen-ti</id>
    <content type="html"><![CDATA[<p>1.安装</p>

<pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text-2
</code></pre>

<p>2.更新</p>

<pre><code>sudo apt-get install sublime-text-2
</code></pre>

<p>3.安装包控制(Package Control)</p>

<p>view → show console（CTRL+ `）</p>

<pre><code>import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())
</code></pre>

<p>粘贴入以上代码，回车。</p>

<p><a href="http://lucifr.com/139225/sublime-text-2-tricks-and-tips/">常用插件</a></p>

<!-- more -->


<p>4.Ubuntu 中文 coverntutf8 中文乱码</p>

<pre><code>sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python2.6
</code></pre>

<p>ST2自带的python26.zip 继续让它在</p>

<p>然后</p>

<pre><code>ln -s /usr/lib/python2.6 PATH_OF_ST2_LIB
</code></pre>

<p>PATH_OF_ST2_LIB 通常是：/usr/lib/sublime-text-2/lib</p>

<p>5.sublime text 中文输入问题</p>

<pre><code>sudo apt-get install fcitx
</code></pre>

<p>换用fcitx 输入法,sunpinyin(谷歌拼音有点起始字符不是合法拼音生母时会当作英文直接录入)</p>

<p>全局->程序: 取消”使用第一个输入法为非激活状态”(否则英文输入状态第一个字符是大写字符时,不会直接录入)</p>

<p>附加:禁用快速输入</p>

<p>全局->外观:全部取消勾选</p>

<p>全局->快捷键:输入法切换alt+space;切换标点的全半角shift+space;翻页增加- +;其他快捷键全部删除</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slash主题的安装]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/slashzhu-ti-de-an-zhuang/"/>
    <updated>2013-04-07T12:55:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/slashzhu-ti-de-an-zhuang</id>
    <content type="html"><![CDATA[<p>安装</p>

<pre><code>$ cd octopress
$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
$ rake install['slash']
$ rake generate
</code></pre>

<p><a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html#questions">主题介绍地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 简易配置]]></title>
    <link href="http://whatislove.github.com/blog/2013/04/07/octopress-jian-yi-pei-zhi/"/>
    <updated>2013-04-07T12:03:00+08:00</updated>
    <id>http://whatislove.github.com/blog/2013/04/07/octopress-jian-yi-pei-zhi</id>
    <content type="html"><![CDATA[<p>1.安装Ruby</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
Install Ruby 1.9.3
rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>

<p>如果出现红色缺少的类库，请sudo apt-get install 安装</p>

<p>2.设置 Octopress</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
ruby --version  # Should report Ruby 1.9.3
gem install bundler
bundle install
rake install  #Install the default Octopress theme
</code></pre>

<!-- more -->


<p>3.配置github pages</p>

<p>在github新建一个名为&#8221;username.github.com&#8221;的代码仓库</p>

<p><a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a></p>

<p>使用脚本部署</p>

<pre><code>rake setup_github_pages #在此过程会询问你的代码仓库的地址，按提示完成即可
</code></pre>

<p>将默认的博客发布到你自己的域名</p>

<pre><code>rake generate
rake deploy

rake preview #本机进行预览http://localhost:4000 
</code></pre>

<p>4.配置Octopress</p>

<p>Octopress的配置主要在_config.yml文件中</p>

<p>5.文章编写</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>该命令将会在source/_posts目录下生成一个名为YYYY-MM-DD-post-title.markdown的文件，编辑该文件即可书写你的文章了。</p>

<p><a href="http://wowubuntu.com/markdown/index.html">markdown语法</a></p>
]]></content>
  </entry>
  
</feed>
